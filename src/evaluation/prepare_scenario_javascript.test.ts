import { expect } from "chai"

import { Scenario } from "../data/interface"
import { init_new_data_component } from "../data/modify"
import { deindent } from "../utils/deindent"
import { prepare_scenario_javascript } from "./prepare_scenario_javascript"


describe("prepare_scenario_javascript", () =>
{
    const scenario_fixture = (): Scenario => ({
        id: 1,
        description: "Test Scenario",
        values: { value: { value: "5" } },
    })

    const component_fixture = (scenario: Scenario) => init_new_data_component({
        value_type: "function",
        input_value: "Math.max(value, min) + offset",
        function_arguments: [
            { id: 0, name: "min", default_value: "0" },
            { id: 1, name: "value" },
            { id: 2, name: "offset", default_value: "10" },
        ],
        // This should be generated by format_function_input_value_string
        // from the input_value and function_arguments
        result_value: "(min = 0, value, offset = 10) => Math.max(value, min) + offset",

        scenarios: [scenario]
    })


    it("prepares javascript with scenario values", () =>
    {
        const scenario = scenario_fixture()
        const component = component_fixture(scenario)
        const javascript = prepare_scenario_javascript({ component, scenario })
        const expected = deindent(`
        function calc()
        {
            func = (min = 0, value, offset = 10) => Math.max(value, min) + offset;

            return func(undefined, 5, undefined);
        }
        calc();
        `)

        expect(javascript).equals(expected)
    })


    it("should handling iterating over one variable", () =>
    {
        const scenario = scenario_fixture()
        scenario.values["value"] = { value: "[1,2,3]", iterate_over: true }
        const component = component_fixture(scenario)

        const javascript = prepare_scenario_javascript({ component, scenario })
        const expected = deindent(`
        function calc()
        {
            func = (min = 0, value, offset = 10) => Math.max(value, min) + offset;

            // iterate over argument "value"
            labels = [1,2,3]
            results = labels.map(value =>
            {
                return func(undefined, value, undefined);
            });

            return { labels, results };
        }
        calc();
        `)

        expect(javascript).equals(expected)
    })


    it("should reject iterating over two variables", () =>
    {
        const scenario = scenario_fixture()
        scenario.values["min"] = { value: "[0, 2, 4]", iterate_over: true }
        scenario.values["value"] = { value: "[1,2,3]", iterate_over: true }
        const component = component_fixture(scenario)

        expect(() => prepare_scenario_javascript({ component, scenario })).throws("Can only iterate over one input at a time")
        // const expected = deindent(`
        // function calc()
        // {
        //     func = (min = 0, value, offset = 10) => Math.max(value, min) + offset;

        //     // iterate over argument "min"
        //     return [0, 2, 4].map(min =>
        //     {
        //         // iterate over argument "value"
        //         return [1,2,3].map(value =>
        //         {
        //             return func(min, value, undefined);
        //         });
        //     });
        // }
        // calc();
        // `)

        // expect(javascript).equals(expected)
    })
})
